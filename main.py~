import logging
import os
import random
import string

import cherrypy
import wsgiref.handlers


logging.basicConfig(level=logging.DEBUG)
logging.info('%s: %r', '__name__', __name__)

class Root2:
    @cherrypy.expose
    def index(self, param1=None, param2=None):
        if cherrypy.request.method == 'POST':
             return f'Received POST data: param1={param1}, param2={param2}'
        else:
             return 'Send a POST request iwth parameters.'


class Root:
    """...

    Use the index method to handle "/".
    Use the register method to handle "/register".
    """

    @cherrypy.expose
    def index(self):
        return "Hello, ALFA CherryPy from Google App Engine!"

    @cherrypy.expose
    def register(self):
        """Accept registration info.

        This endpoint accepts user registration info.
        """
        pass

@cherrypy.expose
class MyWebService(object):

    @cherrypy.tools.accept(media='text/plain')
    def GET(self):
        logging.info(f'Entered GET method')
        return cherrypy.session['mystring']

# @cherrypy.tools.json_in():
# This decorator automatically parses the incoming request body if its Content-Type is application/json. The parsed JSON data is then made available as a Python dictionary at cherrypy.request.json.
# @cherrypy.tools.json_out():
# This decorator automatically serializes the Python object returned by your exposed method into a JSON string and sets the Content-Type response header to application/json.

    @cherrypy.tools.json_in()  # Enables automatic parsing of incoming JSON
    @cherrypy.tools.json_out() # Enables automatic serialization of outgoing Python objects to JSON
    def POST(self, length=8):
        logging.info(f'Entered POST method')
        print(f'Entered POST method')
        if hasattr(cherrypy.request, 'json'):
            logging.info('YYYY %s: %r', 'cherrypy.request.json', cherrypy.request.json)
        else:
            logging.info('No cherrypy.request.json')

        some_string = ''.join(random.sample(string.hexdigits, int(length)))
        cherrypy.session['mystring'] = some_string
        logging.info(f'Returning {some_string!r}')
        return some_string

    def PUT(self, another_string):
        logging.info(f'Entered PUT method')
        cherrypy.session['mystring'] = another_string

    def DELETE(self):
        logging.info(f'Entered DELETE method')
        cherrypy.session.pop('mystring', None)


def is_running_on_gcp():
    """Determine if the application is running on Google Cloud Platform."""
    return 'GOOGLE_CLOUD_PROJECT' in os.environ


# This ?? from search -- cherry py app wsgi main
# Mount the CherryPy application to get a WSGI callable
#1 myapp = cherrypy.tree.mount(Root())
# You can then use this 'application' callable with any WSGI server.
# For example, if using Gunicorn:
# gunicorn -w 4 your_module:myapp
#2
# cherrypy.tree.mount(Root())
cherrypy.tree.mount(MyWebService())
myapp = cherrypy.tree

# Use the following configuration for App Engine.
# It's important to bind to 0.0.0.0 to listen on all interfaces
# and to set the port to 8080 as required by App Engine.
cherrypy.config.update({'server.socket_host': '0.0.0.0',
                        'server.socket_port': 8080})

conf = {
        '/': {
            'request.dispatch': cherrypy.dispatch.MethodDispatcher(),
            'tools.sessions.on': True,
            'tools.response_headers.on': True,
            'tools.response_headers.headers': [('Content-Type', 'text/plain')],
        }
    }


if is_running_on_gcp():
    logging.info('Running on Google Cloud')
    pass

elif __name__ == '__main__':
    logging.info('Not running on Google Cloud')
    # cherrypy.quickstart(MyWebService(), '/', conf)
    cherrypy.quickstart(Root2())

else:
    logging.info('Not running on Google Cloud')
    logging.error('unexpected')
